{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.ts","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileInfo","profile","className","classes","descriptionBlock","src","photos","large","alt","aboutMe","contacts","facebook","vk","github","Preloader","Post","item","message","likeCount","MyPosts","React","memo","postsElements","posts","map","p","key","id","myPosts","AddNewPostForm","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","placeholder","component","Textarea","name","validate","requiredField","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","content","ProfileContainer","userId","Number","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.4fc3ffa8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3eTCJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__3Oz-p\",\"posts\":\"MyPosts_posts__5ypcR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__13Uqh\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const setEditModeOn = () => {\r\n        setEditMode(true)\r\n    }\r\n    const setEditModeOff = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n                <span\r\n                    onDoubleClick={setEditModeOn}\r\n                >{props.status || \"-----\"}</span>\r\n            </div>\r\n            }\r\n            { editMode &&\r\n            <div>\r\n                <input\r\n                    autoFocus={true}\r\n                    onChange={onStatusChange}\r\n                    onBlur={setEditModeOff}\r\n                    value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}: ProfileInfoPropsType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={classes.descriptionBlock}>\r\n            <img src={profile.photos.large} alt={\"large user's ava\"}/>\r\n            <ProfileStatusWithHooks\r\n                status={status}\r\n                updateStatus={updateStatus}\r\n            />\r\n            <div>{profile.aboutMe}</div>\r\n            <div>{profile.contacts.facebook}</div>\r\n            <div>{profile.contacts.vk}</div>\r\n            <div>{profile.contacts.github}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport classes from \"./Post.module.css\";\r\nimport {PostType} from \"../../../../redux/profile-reducer\";\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src={'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSz3oe7au6Voj7bwkAdVqEhbemBlvOSDNsybGBb-1nN_q4gPhB3&usqp=CAU'} alt={'ava'}></img>\r\n            {props.message}\r\n            <div>\r\n                <span>likes </span>{props.likeCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {MapStatePropsType, MapDispatchPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/formsControls/FormsControls\";\r\n\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst MyPosts = React.memo((props: PropsType) => {\r\n\r\n    let postsElements = props.posts.map((p) =>\r\n        <Post\r\n            key={p.id}\r\n            message ={p.message}\r\n            likeCount={p.likeCount}\r\n            id={p.id}\r\n        />\r\n    );\r\n\r\n    let addNewPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.myPosts}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostForm onSubmit={addNewPost}/>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nlet maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPost: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={\"Enter your post\"}\r\n                    component={Textarea}\r\n                    name={\"newPostText\"}\r\n                    validate={[requiredField, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostForm = reduxForm<FormDataType>({form: 'login'})(AddNewPost)\r\n\r\nexport default MyPosts;","import {addPostActionCreator, PostType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps,mapDispatchToProps )(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport classes from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div className={classes.content}>\r\n            <div><img src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSUhwe-8xP7nhoZdkOpDpsCI2gctp9J_XTmSYBSy6twumMhKRmi&usqp=CAU' alt={'background'} /></div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\n// import {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string | undefined\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number|null) => void\r\n    getStatus: (userId: number|null) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype ProfileContainerType = MapStatePropsType & MapDispatchPropsType;\r\n\r\ntype CommonPropsType = RouteComponentProps<PathParamsType> & ProfileContainerType;\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType>{\r\n\r\n    componentDidMount() {\r\n        let userId: number | null = Number(this.props.match.params.userId);\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootState):MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}