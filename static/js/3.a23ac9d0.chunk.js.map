{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.ts","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileDataReduxForm","reduxForm","form","handleSubmit","error","profile","onSubmit","createField","Input","Textarea","Object","keys","contacts","map","key","ProfileData","isOwner","onClick","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","href","github","vk","facebook","instagram","mainLink","twitter","website","youtube","ProfileInfo","savePhoto","saveProfile","Preloader","className","classes","descriptionBlock","src","photos","large","userPhoto","alt","type","target","files","length","initialValues","formData","Post","item","message","likeCount","MyPosts","React","memo","postsElements","posts","p","id","myPosts","AddNewPostForm","values","addPost","newPostText","maxLength10","maxLengthCreator","Field","placeholder","component","name","validate","requiredField","MyPostsContainer","profilePage","dispatch","actions","addPostActionCreator","Profile","content","ProfileContainer","userId","Number","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","withRouter"],"mappings":"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","file":"static/js/3.a23ac9d0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect(Component: React.ComponentType) {\r\n\r\n    function RedirectComponent(props: MapStatePropsType) {\r\n            let {isAuth, ...restProps} = props\r\n            if (!props.isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...restProps }/>\r\n\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3eTCJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__3Oz-p\",\"posts\":\"MyPosts_posts__5ypcR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__13Uqh\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const setEditModeOn = () => {\r\n        setEditMode(true)\r\n    }\r\n    const setEditModeOff = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n                <b>Status: </b>\r\n                <span\r\n                    onDoubleClick={setEditModeOn}\r\n                >{props.status || \"-----\"}</span>\r\n            </div>\r\n            }\r\n            { editMode &&\r\n            <div>\r\n                <input\r\n                    autoFocus={true}\r\n                    onChange={onStatusChange}\r\n                    onBlur={setEditModeOff}\r\n                    value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport {createField, Input, Textarea} from \"../../common/formsControls/FormsControls\";\r\nimport {reduxForm, InjectedFormProps} from \"redux-form\";\r\n\r\ntype ContactsType = {\r\n    github: string | null\r\n    vk: string | null\r\n    facebook: string | null\r\n    instagram: string | null\r\n    mainLink: string | null\r\n    twitter: string | null\r\n    website: string | null\r\n    youtube: string | null\r\n}\r\n\r\nexport type ProfileDataFormType = {\r\n    fullName: string | null\r\n    lookingForAJob: boolean | null\r\n    lookingForAJobDescription: string | null\r\n    aboutMe: string | null\r\n    contacts: ContactsType\r\n}\r\n\r\ntype ProfileFormPropsType = {\r\n    profile: ProfileDataFormType\r\n}\r\n\r\ntype ProfileFormValuesTypeKeys = Extract<keyof ProfileDataFormType, string>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormType, ProfileFormPropsType> & ProfileFormPropsType > = ({handleSubmit, error, profile}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        {error && <div>\r\n            {error}\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b>: {createField<ProfileFormValuesTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {createField<ProfileFormValuesTypeKeys>(\"\", \"lookingForAJob\", [], Input, \"checkbox\")}\r\n        </div>\r\n        <div>\r\n            <b>My professional skills</b>: {createField<ProfileFormValuesTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>: {createField<ProfileFormValuesTypeKeys>(\"About me\", \"aboutMe\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile?.contacts).map(key => {\r\n                return <div key={key}>\r\n                    <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n                </div>\r\n            })}\r\n        </div>\r\n        <div>\r\n            <button>Save</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileDataFormType, ProfileFormPropsType>({form: \"editProfile\"})(ProfileDataForm)\r\n\r\nexport default ProfileDataReduxForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"./../../../assets/images/user.png\";\r\nimport ProfileDataReduxForm, { ProfileDataFormType } from \"./ProfileDataForm\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n    saveProfile: (profile: ProfileDataFormType) => void\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}: ProfileInfoPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const goToEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileDataFormType) => {\r\n        saveProfile(formData)\r\n        // setEditMode(false)\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.descriptionBlock}>\r\n            <img src={profile.photos.large || userPhoto} alt={\"large user's ava\"}/>\r\n            {isOwner && <input\r\n                type={\"file\"}\r\n                onChange={mainPhotoSelected}\r\n            />}\r\n            <ProfileStatusWithHooks\r\n                status={status}\r\n                updateStatus={updateStatus}\r\n            />\r\n            {editMode ?\r\n                <ProfileDataReduxForm initialValues={profile} onSubmit={onSubmit} profile={profile}/> :\r\n                <ProfileData isOwner={isOwner} goToEditMode={goToEditMode}\r\n                             fullName={profile.fullName} lookingForAJob={profile.lookingForAJob}\r\n                             lookingForAJobDescription={profile.lookingForAJobDescription}\r\n                             aboutMe={profile.aboutMe} contacts={profile.contacts}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataType = {\r\n    isOwner?: boolean\r\n    goToEditMode?: () => void\r\n    fullName: string | null\r\n    lookingForAJob: boolean | null\r\n    lookingForAJobDescription: string | null\r\n    aboutMe: string | null\r\n    contacts: {\r\n        github: string | null\r\n        vk: string | null\r\n        facebook: string | null\r\n        instagram: string | null\r\n        mainLink: string | null\r\n        twitter: string | null\r\n        website: string | null\r\n        youtube: string | null\r\n    }\r\n}\r\n\r\nconst ProfileData = (props: ProfileDataType) => {\r\n    return <>\r\n        {props.isOwner && <div><button onClick={props.goToEditMode}>Edit</button></div>}\r\n        <div>\r\n            <b>Full name</b>: {props.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {props.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {props.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {props.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {props.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>:<br/>\r\n            <b>-My <a href={props.contacts.github || \"\"}>github</a> profile</b><br/>\r\n            <b>-My <a href={props.contacts.vk || \"\"}>vk</a> profile</b><br/>\r\n            <b>-My <a href={props.contacts.facebook || \"\"}>facebook</a> profile</b><br/>\r\n            <b>-My <a href={props.contacts.instagram || \"\"}>instagram</a> profile</b><br/>\r\n            <b>-My <a href={props.contacts.mainLink || \"\"}>portfolio</a></b><br/>\r\n            <b>-My <a href={props.contacts.twitter || \"\"}>twitter</a> profile</b><br/>\r\n            <b>-My <a href={props.contacts.website || \"\"}>website</a></b><br/>\r\n            <b>-My <a href={props.contacts.youtube || \"\"}>youtube</a></b><br/>\r\n        </div>\r\n    </>\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport classes from \"./Post.module.css\";\r\nimport {PostType} from \"../../../../types/types\";\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src={'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSz3oe7au6Voj7bwkAdVqEhbemBlvOSDNsybGBb-1nN_q4gPhB3&usqp=CAU'} alt={'ava'}></img>\r\n            {props.message}\r\n            <div>\r\n                <span>likes </span>{props.likeCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {MapStatePropsType, MapDispatchPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/formsControls/FormsControls\";\r\n\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst MyPosts = React.memo((props: PropsType) => {\r\n\r\n    let postsElements = props.posts.map((p) =>\r\n        <Post\r\n            key={p.id}\r\n            message ={p.message}\r\n            likeCount={p.likeCount}\r\n            id={p.id}\r\n        />\r\n    );\r\n\r\n    let addNewPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.myPosts}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostForm onSubmit={addNewPost}/>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nlet maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPost: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={\"Enter your post\"}\r\n                    component={Textarea}\r\n                    name={\"newPostText\"}\r\n                    validate={[requiredField, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostForm = reduxForm<FormDataType>({form: 'login'})(AddNewPost)\r\n\r\nexport default MyPosts;","import {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\nexport type MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(actions.addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps,mapDispatchToProps )(MyPosts)\r\n\r\nexport default MyPostsContainer","import React from \"react\";\r\nimport classes from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileDataFormType} from \"./ProfileInfo/ProfileDataForm\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileDataFormType) => void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div className={classes.content}>\r\n            <div><img src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSUhwe-8xP7nhoZdkOpDpsCI2gctp9J_XTmSYBSy6twumMhKRmi&usqp=CAU' alt={'background'} /></div>\r\n            <ProfileInfo\r\n                saveProfile={props.saveProfile}\r\n                savePhoto={props.savePhoto}\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileDataFormType} from \"./ProfileInfo/ProfileDataForm\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PathParamsType = {\r\n    userId: string | undefined\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number|null) => void\r\n    getStatus: (userId: number|null) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n    saveProfile: (profile: ProfileDataFormType) => void\r\n}\r\n\r\ntype ProfileContainerType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype CommonPropsType = RouteComponentProps<PathParamsType> & ProfileContainerType\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType>{\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = Number(this.props.match.params.userId)\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<CommonPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        // if (!this.props.match.params.userId) {\r\n        //     this.refreshProfile()\r\n        // }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto}\r\n                saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType):MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus,\r\n        updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}