{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.ts"],"names":["module","exports","DialogItem","props","path","id","className","classes","dialog","active","to","name","Message","messages","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","placeholder","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","key","messagesElements","m","dialogsItems","values","addMessage","newMessageBody","compose","connect","state","dispatch","addMessageActionCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,oBCA9ID,EAAOC,QAAU,CAAC,OAAS,6B,oBCA3BD,EAAOC,QAAU,CAAC,SAAW,4B,iHCmBdC,EAXK,SAACC,GAEjB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,yBAAKC,UAAS,UAAKC,IAAQC,OAAb,YAAuBD,IAAQE,SACzC,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,Q,kBCFvBC,EAN4B,SAACT,GACxC,OACI,yBAAKG,UAAWC,IAAQM,UAAWV,EAAMW,U,iCC4B3CC,EAAeC,YAAiB,IAgBhCC,EAAsBC,YAAwB,CAACC,KAAM,yBAA/BD,EAdsC,SAACf,GAC/D,OAAO,0BAAMiB,SAAUjB,EAAMkB,cACzB,6BACI,kBAACC,EAAA,EAAD,CACIC,UAAWC,IACXC,SAAU,CAACC,IAAeX,GAC1BJ,KAAM,iBACNgB,YAAa,wBAGrB,6BAAK,oDAMEC,EAvCC,SAACzB,GACb,IAAI0B,EAAkB1B,EAAM2B,YAAYC,QAAQC,KAAK,SAACC,GAAD,OAAkB,kBAAC,EAAD,CAAYC,IAAKD,EAAE5B,GAAIA,GAAI4B,EAAE5B,GAAIM,KAAMsB,EAAEtB,UAC5GwB,EAAmBhC,EAAM2B,YAAYjB,SAASmB,KAAI,SAACI,GAAD,OAAmB,kBAAC,EAAD,CAASF,IAAKE,EAAE/B,GAAIS,QAASsB,EAAEtB,aAMxG,OACI,yBAAKR,UAAWC,IAAQwB,SACpB,yBAAKzB,UAAWC,IAAQ8B,cACnBR,GAEL,yBAAKvB,UAAWC,IAAQM,UACnBsB,EACD,kBAAClB,EAAD,CAAqBG,SAXb,SAACkB,GACjBnC,EAAMoC,WAAWD,EAAOE,sB,eCYjBC,sBACXC,aAfkB,SAACC,GACnB,MAAO,CACHb,YAAaa,EAAMb,gBAIF,SAACc,GACtB,MAAO,CACHL,WAAY,SAACC,GACTI,EAASC,YAAwBL,SAK9BC,CAGbb","file":"static/js/4.2c0019ee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2sG--\",\"dialogsItems\":\"Dialogs_dialogsItems__31zXk\",\"active\":\"Dialogs_active__1z_Ga\",\"messages\":\"Dialogs_messages__31Eno\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__3lXd5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Message_messages__3LXnT\"};","import React from \"react\";\r\nimport classes from \"./DialogItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsTypeDialogItem = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nconst  DialogItem = (props:PropsTypeDialogItem) => {\r\n\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={`${classes.dialog} ${classes.active}`}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport classes from \"./Message.module.css\";\r\n\r\ntype PropsTypeMessage = {\r\n    message: string\r\n}\r\n\r\nconst Message:React.FC<PropsTypeMessage> = (props) => {\r\n    return (\r\n        <div className={classes.messages}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {MapDispatchPropsType, MapStatePropsType} from \"./DialogsContainer\";\r\nimport {DialogType, MessageType} from \"../../redux/dialogs-reducer\";\r\nimport {InjectedFormProps, reduxForm, Field} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\nimport {Textarea} from \"../common/formsControls/FormsControls\";\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\ntype PropsDialogsType = MapDispatchPropsType & MapStatePropsType;\r\n\r\nconst Dialogs = (props:PropsDialogsType) => {\r\n    let dialogsElements = props.dialogsPage.dialogs.map( (d:DialogType) => <DialogItem key={d.id} id={d.id} name={d.name}/>);\r\n    let messagesElements = props.dialogsPage.messages.map((m:MessageType) => <Message key={m.id} message={m.message}/>)\r\n\r\n    let addNewMessage = (values: FormDataType) => {\r\n        props.addMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                {messagesElements}\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength50 = (maxLengthCreator(50));\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field\r\n                component={Textarea}\r\n                validate={[requiredField, maxLength50]}\r\n                name={\"newMessageBody\"}\r\n                placeholder={\"Enter your message\"}\r\n            />\r\n        </div>\r\n        <div><button>Add message</button></div>\r\n    </form>\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: \"dialogsAddMessageForm\"})(AddMessageForm)\r\n\r\nexport default Dialogs;","import {\r\n    addMessageActionCreator,\r\n    DialogsPageType,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport React from \"react\";\r\n// import {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nexport type MapStatePropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n    addMessage: (newMessageBody: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addMessage: (newMessageBody: string) => {\r\n            dispatch(addMessageActionCreator(newMessageBody));\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n    // withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}